// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  authControllerRegister,
  authControllerLogin,
  usersControllerFindAll,
  usersControllerCreate,
  usersControllerRemove,
  usersControllerFindOne,
  usersControllerUpdate,
} from '../sdk.gen'
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from '@tanstack/react-query'
import type {
  AuthControllerRegisterData,
  AuthControllerRegisterResponse,
  AuthControllerLoginData,
  AuthControllerLoginResponse,
  UsersControllerFindAllData,
  UsersControllerCreateData,
  UsersControllerRemoveData,
  UsersControllerFindOneData,
  UsersControllerUpdateData,
} from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
    tags?: ReadonlyArray<string>
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const authControllerRegisterQueryKey = (
  options: Options<AuthControllerRegisterData>,
) => createQueryKey('authControllerRegister', options)

export const authControllerRegisterOptions = (
  options: Options<AuthControllerRegisterData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authControllerRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authControllerRegisterQueryKey(options),
  })
}

export const authControllerRegisterMutation = (
  options?: Partial<Options<AuthControllerRegisterData>>,
): UseMutationOptions<
  AuthControllerRegisterResponse,
  DefaultError,
  Options<AuthControllerRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerRegisterResponse,
    DefaultError,
    Options<AuthControllerRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authControllerRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const authControllerLoginQueryKey = (
  options: Options<AuthControllerLoginData>,
) => createQueryKey('authControllerLogin', options)

export const authControllerLoginOptions = (
  options: Options<AuthControllerLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authControllerLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authControllerLoginQueryKey(options),
  })
}

export const authControllerLoginMutation = (
  options?: Partial<Options<AuthControllerLoginData>>,
): UseMutationOptions<
  AuthControllerLoginResponse,
  DefaultError,
  Options<AuthControllerLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerLoginResponse,
    DefaultError,
    Options<AuthControllerLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authControllerLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersControllerFindAllQueryKey = (
  options?: Options<UsersControllerFindAllData>,
) => createQueryKey('usersControllerFindAll', options)

export const usersControllerFindAllOptions = (
  options?: Options<UsersControllerFindAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersControllerFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersControllerFindAllQueryKey(options),
  })
}

export const usersControllerCreateQueryKey = (
  options: Options<UsersControllerCreateData>,
) => createQueryKey('usersControllerCreate', options)

export const usersControllerCreateOptions = (
  options: Options<UsersControllerCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersControllerCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersControllerCreateQueryKey(options),
  })
}

export const usersControllerCreateMutation = (
  options?: Partial<Options<UsersControllerCreateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersControllerCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersControllerRemoveMutation = (
  options?: Partial<Options<UsersControllerRemoveData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerRemoveData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerRemoveData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersControllerRemove({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersControllerFindOneQueryKey = (
  options: Options<UsersControllerFindOneData>,
) => createQueryKey('usersControllerFindOne', options)

export const usersControllerFindOneOptions = (
  options: Options<UsersControllerFindOneData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersControllerFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersControllerFindOneQueryKey(options),
  })
}

export const usersControllerUpdateMutation = (
  options?: Partial<Options<UsersControllerUpdateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerUpdateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersControllerUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
